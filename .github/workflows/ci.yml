name: .NET CI/CD with Docker

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: docker.io
  IMAGE_NAME: ricks95/rivalsgg-api

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0 
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '8.0.x'
    
    - name: Find solution or project files
      run: find . -name "*.sln" -o -name "*.csproj"
      
    - name: Restore dependencies
      run: |
        # Locate the solution or main project file
        SOLUTION_FILE=$(find . -name "*.sln" | head -n 1)
        if [ -z "$SOLUTION_FILE" ]; then
          # If no solution file, try to find the main project file
          PROJECT_FILE=$(find . -name "*.csproj" | head -n 1)
          if [ -z "$PROJECT_FILE" ]; then
            echo "No .sln or .csproj file found"
            exit 1
          fi
          dotnet restore "$PROJECT_FILE"
        else
          dotnet restore "$SOLUTION_FILE"
        fi
    
    - name: Build
      run: |
        SOLUTION_FILE=$(find . -name "*.sln" | head -n 1)
        if [ -z "$SOLUTION_FILE" ]; then
          PROJECT_FILE=$(find . -name "*.csproj" | head -n 1)
          dotnet build "$PROJECT_FILE" --no-restore
        else
          dotnet build "$SOLUTION_FILE" --no-restore
        fi
    
    - name: Test with Coverage
      run: |
        TEST_PROJECTS=$(find . -name "*Tests.csproj" -o -name "*Test.csproj")
        if [ -z "$TEST_PROJECTS" ]; then
          echo "No test projects found, skipping tests"
        else
          # Run tests with coverage for the solution
          SOLUTION_FILE=$(find . -name "*.sln" | head -n 1)
          if [ -n "$SOLUTION_FILE" ]; then
            dotnet test "$SOLUTION_FILE" \
              --no-build \
              --verbosity normal \
              --collect:"XPlat Code Coverage" \
              --results-directory ./TestResults
          else
            # Fallback to individual test projects
            for TEST_PROJECT in $TEST_PROJECTS; do
              echo "Testing $TEST_PROJECT"
              dotnet test "$TEST_PROJECT" \
                --no-build \
                --verbosity normal \
                --collect:"XPlat Code Coverage" \
                --results-directory ./TestResults
            done
          fi
        fi

    - name: Install ReportGenerator
      run: dotnet tool install -g dotnet-reportgenerator-globaltool
      
    - name: Generate Coverage Reports
      run: |
        if [ -d "./TestResults" ]; then
          reportgenerator \
            -reports:"TestResults/**/coverage.cobertura.xml" \
            -targetdir:"TestResults/CoverageReport" \
            -reporttypes:"Cobertura;Html"
        else
          echo "No test results found, skipping coverage report generation"
        fi

    - name: Upload Coverage to Codacy
      if: env.CODACY_PROJECT_TOKEN != null
      uses: codacy/codacy-coverage-reporter-action@v1
      with:
        project-token: ${{ secrets.CODACY_PROJECT_TOKEN }}
        coverage-reports: TestResults/CoverageReport/Cobertura.xml
      continue-on-error: true

    - name: Upload Coverage to Codacy (Alternative)
      if: failure() && env.CODACY_PROJECT_TOKEN != null
      run: |
        if [ -f "TestResults/CoverageReport/Cobertura.xml" ]; then
          curl -Ls -o codacy-coverage-reporter "$(curl -Ls https://api.github.com/repos/codacy/codacy-coverage-reporter/releases/latest | jq -r '.assets | map({name, browser_download_url} | select(.name | contains("codacy-coverage-reporter-linux"))) | .[0].browser_download_url')"
          chmod +x codacy-coverage-reporter
          ./codacy-coverage-reporter report -r TestResults/CoverageReport/Cobertura.xml -t ${{ secrets.CODACY_PROJECT_TOKEN }}
        fi
      continue-on-error: true
        
    - name: Upload Test Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-coverage-results
        path: TestResults/
        retention-days: 30

  docker-build-and-push:
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Extract metadata (tags, labels) for Docker
      id: meta
      uses: docker/metadata-action@v4
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        build-args: |
          MARVEL_API_KEY=${{ secrets.MARVEL_API_KEY }}